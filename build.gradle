buildscript {
    repositories {
        mavenCentral()
    }

    ext {
        kotlin_version = "1.6.21"
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id 'com.google.protobuf' version '0.8.8' apply false
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.kapt' version "${kotlin_version}"
    id "org.owasp.dependencycheck" version "8.2.1"
    id "me.champeau.jmh" version "0.6.8"
}

group = 'com.exactpro.th2'
version = release_version

ext {
    cradleVersion = '5.1.1-dev'
    junitVersion = '5.9.3'
}

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

java {
    sourceCompatibility = 11
    targetCompatibility = 11

    withJavadocJar()
    withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if (task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

test {
    useJUnitPlatform {
        excludeTags('integration-test')
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        includeTags('integration-test')
    }
}

dependencies {
    api platform("com.exactpro.th2:bom:4.4.0")
    api('com.exactpro.th2:grpc-common:4.3.0-dev') {
        because('protobuf transport is main now, this dependnecy should be moved to grpc, mq protobuf modules after splitting')
    }
    api("com.exactpro.th2:cradle-core:${cradleVersion}") {
        because('cradle is included into common library now, this dependnecy should be moved to a cradle module after splitting')
    }
    api('io.netty:netty-buffer') {
        because('th2 transport protocol is included into common library now, this dependnecy should be moved to a th2 transport module after splitting')
    }

    jmh 'org.openjdk.jmh:jmh-core:0.9'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:0.9'

    implementation 'com.google.protobuf:protobuf-java-util'
    implementation 'com.exactpro.th2:grpc-service-generator:3.4.0'
    implementation "com.exactpro.th2:cradle-cassandra:${cradleVersion}"

    def autoValueVersion = '1.10.1'
    implementation "com.google.auto.value:auto-value-annotations:$autoValueVersion"
    kapt("com.google.auto.value:auto-value:$autoValueVersion") {
        //FIXME: Updated library because it is fat jar
        // auto-value-1.10.1.jar/META-INF/maven/com.google.guava/guava/pom.xml (pkg:maven/com.google.guava/guava@31.1-jre, cpe:2.3:a:google:guava:31.1:*:*:*:*:*:*:*) : CVE-2023-2976, CVE-2020-8908
    }
    //this is required to add generated bridge classes for kotlin default constructors
    implementation(files("$buildDir/tmp/kapt3/classes/main"))

    //FIXME: Add these dependencies as api to grpc-... artifacts
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"
    implementation "io.grpc:grpc-services"

    implementation "com.rabbitmq:amqp-client"

    implementation "org.jetbrains:annotations"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-collections4"
    implementation "org.apache.commons:commons-text"
    implementation("commons-io:commons-io") {
        because('we need FilenameUtil to use wildcard matching')
    }
    implementation "commons-cli:commons-cli"
    implementation "commons-io:commons-io"

    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation("com.fasterxml.jackson.core:jackson-databind") {
        because('provide ability to use object mapper in components')
    }
    implementation("com.fasterxml.jackson.core:jackson-annotations") {
        because('providee ability to use jackson annotations in components')
    }
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'

    implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'

    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.apache.logging.log4j:log4j-core'

    implementation 'io.prometheus:simpleclient'
    implementation 'io.prometheus:simpleclient_hotspot'
    implementation 'io.prometheus:simpleclient_httpserver'
    implementation 'io.prometheus:simpleclient_log4j2'

    implementation('com.squareup.okhttp3:okhttp:4.10.0') {
        because('fix vulnerability in transitive dependency <kubernetes-client>')
    }
    implementation('io.fabric8:kubernetes-client:6.1.1') {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-yaml'
    }

    implementation 'io.github.microutils:kotlin-logging:3.0.0' // The last version bases on kotlin 1.6.0

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation "org.testcontainers:testcontainers:1.17.1"
    testImplementation "org.testcontainers:rabbitmq:1.17.1"

    testFixturesImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version
    testFixturesImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5
    suppressionFile = file('suppressions.xml')
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}