import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "com.exactpro.th2.gradle.base" version "0.1.1"
    id "com.exactpro.th2.gradle.publish" version "0.1.1"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id 'org.jetbrains.kotlin.kapt' version "$kotlin_version"
    id "java-library"
    id "java-test-fixtures"
    id "maven-publish"
    id "com.google.protobuf" version "0.9.4"
    id "me.champeau.jmh" version "0.7.2"
}

group = 'com.exactpro.th2'
version = release_version

ext {
    grpcVersion = '1.62.2'
    protobufVersion = '3.25.3'
    serviceGeneratorVersion = '3.6.1'

    cradleVersion = '5.4.1-dev'
    junitVersion = '5.10.3'

    jmhVersion = '1.37'
    autoValueVersion = '1.10.4'
    genBaseDir = file("${buildDir}/generated/source/proto")
}

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

kotlin {
    jvmToolchain(11)
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"
}

test {
    useJUnitPlatform {
        excludeTags('integration-test')
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        includeTags('integration-test')
    }
}

dependencies {
    api('com.exactpro.th2:grpc-common:4.5.0-dev') {
        because('protobuf transport is main now, this dependency should be moved to grpc, mq protobuf modules after splitting')
    }
    api("com.exactpro.th2:cradle-core:$cradleVersion") {
        because('cradle is included into common library now, this dependency should be moved to a cradle module after splitting')
    }
    api('io.netty:netty-buffer') {
        because('th2 transport protocol is included into common library now, this dependency should be moved to a th2 transport module after splitting')
    }

    jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"

    implementation 'com.google.protobuf:protobuf-java-util'
    implementation "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion"
    implementation "com.exactpro.th2:cradle-cassandra:$cradleVersion"

    implementation "com.google.auto.value:auto-value-annotations:$autoValueVersion"
    kapt("com.google.auto.value:auto-value:$autoValueVersion") {
        //FIXME: Updated library because it is fat jar
        // auto-value-1.10.1.jar/META-INF/maven/com.google.guava/guava/pom.xml (pkg:maven/com.google.guava/guava@31.1-jre, cpe:2.3:a:google:guava:31.1:*:*:*:*:*:*:*) : CVE-2023-2976, CVE-2020-8908
    }
    //this is required to add generated bridge classes for kotlin default constructors
    implementation(files("$buildDir/tmp/kapt3/classes/main"))

    //FIXME: Add these dependencies as api to grpc-... artifacts
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"
    implementation "io.grpc:grpc-services"

    implementation "com.rabbitmq:amqp-client"

    implementation "org.jetbrains:annotations"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-collections4"
    implementation "org.apache.commons:commons-text"
    implementation("commons-io:commons-io") {
        because('we need FilenameUtil to use wildcard matching')
    }
    implementation "commons-cli:commons-cli"
    implementation "commons-io:commons-io"

    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation("com.fasterxml.jackson.core:jackson-databind") {
        because('provide ability to use object mapper in components')
    }
    implementation("com.fasterxml.jackson.core:jackson-annotations") {
        because('providee ability to use jackson annotations in components')
    }
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'

    implementation "com.fasterxml.uuid:java-uuid-generator:5.1.0"

    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.apache.logging.log4j:log4j-core'

    implementation 'io.prometheus:simpleclient'
    implementation 'io.prometheus:simpleclient_hotspot'
    implementation 'io.prometheus:simpleclient_httpserver'
    implementation 'io.prometheus:simpleclient_log4j2'

    implementation("com.squareup.okio:okio:3.4.0") {
        because('fix vulnerability in transitive dependency <com.squareup.okhttp3:okhttp>' +
                'Note: kotlin:1.9 is transitive dependency since 3.5.0')
    }
    implementation("com.squareup.okhttp3:okhttp:4.11.0") {
        because('fix vulnerability in transitive dependency <kubernetes-client>. ' +
                'Note: kotlin:1.9 is transitive dependency since 4.12.0')
    }
    implementation('com.squareup.okhttp3:logging-interceptor:4.11.0') {
        because('fix vulnerability in transitive dependency <kubernetes-client>. ' +
                'Note: kotlin:1.9 is transitive dependency since 4.12.0')
    }

    implementation("io.fabric8:kubernetes-client:6.13.1") {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-yaml'
    }

    implementation "io.github.microutils:kotlin-logging:3.0.5"

    testImplementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.3.1"
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation "org.testcontainers:testcontainers:1.19.8"
    testImplementation "org.testcontainers:rabbitmq:1.19.8"
    testImplementation("org.junit-pioneer:junit-pioneer:2.2.0") {
        because("system property tests")
    }
    testImplementation("org.awaitility:awaitility:4.2.1")

    testFixturesImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testFixturesImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
    test.resources.srcDirs += "$genBaseDir/test/services/java/resources"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
        services {
            artifact = "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion:all@jar"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            services {
                option 'javaInterfacesPath=./java/src'
                option 'javaInterfacesImplPath=./java/src'
                option 'javaMetaInfPath=./java/resources'
            }
        }
        ofSourceSet('test')
    }
}

tasks.named('generateProto') { enabled = false }
tasks.named('extractIncludeProto') { enabled = false }
tasks.named('extractIncludeTestProto') { enabled = false }
tasks.named('extractIncludeTestFixturesProto') { enabled = false }

compileTestJava.dependsOn.add('generateTestProto')
processTestResources.dependsOn.add('generateTestProto')

tasks.register("publicationManualBench", JavaExec.class) {
    mainClass.set('com.exactpro.th2.common.schema.message.impl.rabbitmq.connection.ConnectionManualBenchmark')
    classpath(sourceSets.test.runtimeClasspath)
    dependsOn('testClasses')

    jvmArgs('-XX:StartFlightRecording=duration=60s,settings=profile,filename=publishing-profile-record.jfr')
}