buildscript {
    repositories {
        mavenCentral()
    }

    ext {
        kotlin_version = "1.6.21"
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id 'com.google.protobuf' version '0.8.8' apply false
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

ext {
    cradleVersion       = '3.2.3-dev-version-3.2-3066861168-b96dd04-SNAPSHOT'
    junitVersion        = '5.9.0'
    sharedDir           = file("${project.rootDir}/shared")
}

repositories {
    mavenCentral()
    maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
            project.hasProperty('nexus_user') &&
            project.hasProperty('nexus_password') &&
            project.hasProperty('nexus_url')) ||
        (repository == publishing.repositories.sonatype &&
            project.hasProperty('sonatypeUsername') &&
            project.hasProperty('sonatypePassword')) ||
        (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
        project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
        !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
              name = rootProject.name
              packaging = 'jar'
              description = rootProject.description
              url = vcs_url
              scm {
                url = vcs_url
              }
              licenses {
                license {
                  name = 'The Apache License, Version 2.0'
                  url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
              }
              developers {
                developer {
                  id = 'developer'
                  name = 'developer'
                  email = 'developer@exactpro.com'
                }
              }
              scm {
                url = vcs_url
              }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

clean {
    delete sharedDir
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

test {
    useJUnitPlatform {
        excludeTags('integration-test')
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        includeTags('integration-test')
    }
}

dependencies {
    api platform("com.exactpro.th2:bom:3.2.0")
    api ("com.exactpro.th2:cradle-core:${cradleVersion}")
    api 'com.exactpro.th2:grpc-common:3.12.0-dev-2917850962-SNAPSHOT'

    implementation 'com.google.protobuf:protobuf-java-util'
    implementation 'com.exactpro.th2:grpc-service-generator:3.2.2'
    implementation ("com.exactpro.th2:cradle-cassandra:${cradleVersion}")

    //FIXME: Add these dependencies as api to grpc-... artifacts
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"
    implementation "io.grpc:grpc-services:1.32.1" //FIXME: add to bom

    implementation "com.rabbitmq:amqp-client"

    implementation "org.jetbrains:annotations"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-text:1.9"
    implementation "commons-cli:commons-cli:1.5.0"

    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    // TODO: need to update jackson kotlin module to get rid of kotlin-reflect 1.3.72
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

    implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'

    implementation 'io.github.microutils:kotlin-logging:2.1.23'

    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    implementation 'org.apache.logging.log4j:log4j-1.2-api'
    implementation 'org.apache.logging.log4j:log4j-api'

    implementation 'io.prometheus:simpleclient'
    implementation 'io.prometheus:simpleclient_hotspot'
    implementation 'io.prometheus:simpleclient_httpserver'
    implementation 'io.prometheus:simpleclient_log4j2'
    implementation 'io.prometheus:simpleclient_log4j'

    implementation 'io.fabric8:kubernetes-client:4.13.0'

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation "org.testcontainers:testcontainers:1.17.3"
    testImplementation "org.testcontainers:rabbitmq:1.17.3"

    testFixturesImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version
    testFixturesImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.jvmTarget = "11"
}

clean {
    delete sharedDir
}